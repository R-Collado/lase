---
import BaseHead from "../components/BaseHead.astro";
import SongPreview from "../components/SongPreview.astro";

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <BaseHead {title} />
  <body>
    <main id="main">
      <slot />
      <div class="container">
        <h1>LASE</h1>
        <div class="song-image">
          <div class="overlay"></div>
          <img src="" data-actual-song="" />
        </div>
        <p class="now-playing-message">Now playing...</p>
        <audio class="audio">
          <source src="" type="audio/mpeg" />
        </audio>

        <ul id="song-list">
          <SongPreview />
          <li>
            <button data-value="chosen-1">Chosen 1</button>
          </li>
          <li>
            <button data-value="who-shot-cupid">Who Shot Cupid?</button>
          </li>
          <li>
            <button data-value="pomegranate">Pomegranate</button>
          </li>
          <li>
            <button data-value="congratulations">Congratulations</button>
          </li>
          <li>
            <button data-value="odoriko">踊り子</button>
          </li>
        </ul>
      </div>
    </main>
  </body>
</html>
<style>
  body {
    background: rgb(36, 36, 36);
  }

  main {
    position: relative;
    overflow-x: hidden;
  }

  .container {
    display: flex;
    width: 100vw;
    height: 100vh;
    justify-content: space-between;
    align-items: center;
    padding-inline: 1rem;

    @media (max-width: 860px) {
      flex-direction: column;
      justify-content: center;
    }
  }
</style>

<style>
  #song-list {
    list-style: none;
    padding: 0;
    text-align: right;
    position: relative;

    @media (max-width: 860px) {
      text-align: center;
      margin-top: 5rem;
    }
  }

  h1 {
    color: #fff;
    font-size: 2.5rem;
    font-weight: bold;
    font-family: "Inter", sans-serif;
    margin: 0;
    overflow: hidden;
  }

  button {
    color: #818181;
    background-color: transparent;
    border: 0;
    cursor: pointer;
    font-size: 1.125rem;
    font-weight: bold;
    font-family: "Inter", sans-serif;
    outline: none;

    transition: color 0.4s ease-in-out;
  }

  li:hover button,
  button:focus,
  li.active button {
    color: #fff;
  }
</style>

<script>
  import { gsap } from "gsap";

  const songList = document.querySelector("#song-list");
  const songPreview = songList.querySelector(
    "#song-preview",
  ) as HTMLImageElement;
  const songPreviewImg = songPreview.querySelector("img");
  const songs = songList.querySelectorAll("button");
  const songImage = document.querySelector(
    ".song-image img",
  ) as HTMLImageElement;

  const tl = gsap.timeline({ paused: true });

  tl.fromTo(
    ".overlay",
    {
      y: 0,
    },
    {
      y: "-100%",
      duration: 0.5,
      ease: "sine.in",
    },
    0,
  );

  tl.fromTo(
    ".song-image img",
    {
      y: "-2%",
    },
    {
      y: 0,
      duration: 3,
      repeat: -1,
      yoyo: true,
      ease: "sine.inOut",
    },
    1,
  );

  songs.forEach((song: HTMLButtonElement) => {
    song.addEventListener("mouseenter", () => {
      songPreviewImg.src = `/song-images/${song.dataset.value}.jpg`;
      gsap.to(songPreview, {
        scale: 1,
        opacity: 1,
        y: song.offsetTop,
        pointerEvents: "all",
        duration: 0.25,
        ease: "power2.inOut",
      });
    });

    song.addEventListener("mouseleave", () => {
      gsap.set(songPreview, {
        scale: 0,
        opacity: 0,
        pointerEvents: "none",
        delay: 0.25,
      });
    });

    song.addEventListener("click", () => {
      playClickAudio();

      if (songImage.dataset.actualSong === song.dataset.value) return;

      if (songImage.dataset.actualSong === "") {
        gsap.set(".overlay", {
          y: "0",
        });
      }

      const audio = document.querySelector(".audio") as HTMLAudioElement;
      audio.src = `/songs/${song.dataset.value}.mp3`;
      setTimeout(() => toggleAudio(), 1000);

      tl.pause();

      songs.forEach((s) => s.parentElement.classList.remove("active"));
      song.parentElement.classList.add("active");

      resetOverlay();

      setTimeout(() => {
        songImage.src = `/song-images/${song.dataset.value}.jpg`;
        songImage.dataset.actualSong = song.dataset.value;
        tl.play(0);
      }, 1000);
    });
  });

  window.addEventListener("keydown", (e) => {
    if (e.code === "Space") {
      playClickAudio();
      toggleAudio();
    }
  });

  const resetOverlay = () => {
    gsap.to(".overlay", {
      y: "0",
      duration: 0.5,
      ease: "sine.in",
    });
  };

  const toggleAudio = () => {
    const audio = document.querySelector(".audio") as HTMLAudioElement;
    const playingMessage = document.querySelector(".now-playing-message");

    if (audio.src === "") return;

    audio.paused ? audio.play() : audio.pause();
    audio.paused
      ? playingMessage.classList.remove("active")
      : playingMessage.classList.add("active");
  };

  const playClickAudio = () => {
    const clickAudio = new Audio("/songs/click.mp3");
    clickAudio.play();
  };
</script>

<!-- Song Image styles -->

<style lang="scss">
  .song-image {
    display: grid;
    place-content: center;
    aspect-ratio: 2 / 1;
    overflow: hidden;
    width: 25rem;
    height: 40rem;
    position: relative;
    margin-top: 2.5rem;

    img {
      width: 100%;
      height: 100%;
      aspect-ratio: 1 / 2;
      object-fit: cover;
    }

    @media (max-width: 860px) {
      width: 15rem;
      height: 15rem;

      img {
        aspect-ratio: 1 / 1;
        width: 110%;
        height: 110%;
      }
    }
  }

  .overlay {
    background: rgb(36, 36, 36);
    position: absolute;
    inset: 0;
    z-index: 10;
  }

  .now-playing-message {
    color: #fff;
    font-size: 1.125rem;
    font-weight: light;
    font-family: "Inter", sans-serif;
    z-index: 20;
    position: absolute;
    left: 50%;
    bottom: 5%;
    transform: translateX(-70%);
    opacity: 0;
    transition: opacity 0.25s ease-in-out;

    &.active {
      opacity: 0.5;
      transition-delay: 0.5s;
    }

    @media (max-width: 860px) {
      bottom: 35%;
      transform: translateX(-45%);
    }
  }
</style>
